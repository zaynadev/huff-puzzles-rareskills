/** 
 *  COUNT_TIME HUFF EXERCISE
 *
 *  The task is to write within the `MAIN` macro below, functions named `getTimeElapsed` and `getTimeUntil`.
 * 
 *  `getTimeElapsed` receives the uint256 parameter (_timestamp) and counts how much time elapsed since the provided _timestamp, it should return 0 if the provided timestamp is in the future 
 *  `getTimeUntil` receives uint256 parameter (_timestamp) and counts how much time remains until the provided _timestamp, it should return 0 if the provided timestamp is in the past
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function getTimeElapsed(uint256) payable returns(uint256)
#define function getTimeUntil(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload
    0xe0 shr
    dup1

    __FUNC_SIG(getTimeElapsed) 
    eq
    getTimeElapsed jumpi

    __FUNC_SIG(getTimeUntil) 
    eq
    getTimeUntil jumpi

    0x00 0x00 revert

    getTimeElapsed:
        0x04 calldataload           // param1
        timestamp                   // timestamp, param1
        dup1                        // timestamp, timestamp, param1
        dup3                        // param1, timestamp, timestamp, param1
        gt                          // (0 or 1), timestamp, param1
        zero jumpi                  // timestamp, param1
        sub                         // elapsed
        0x00 mstore
        0x20 0x00 return

        zero:
            0x00 0x00 mstore
            0x20 0x00 return

    getTimeUntil:
        0x04 calldataload           // param1
        timestamp                   // timestamp, param1
        dup2                        // param1, timestamp, param1
        dup2                        // timestamp, param1, timestamp, param1
        gt                          // (0 or 1), timestamp, param1
        zero jumpi                  // timestamp, param1
        dup2                        // param1, timestamp, param1
        sub                         // elapsed, param1
        0x00 mstore
        0x20 0x00 return

        zero:
            0x00 0x00 mstore
            0x20 0x00 return





}