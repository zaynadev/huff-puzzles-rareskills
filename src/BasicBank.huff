/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */
#define constant BALANCE = FREE_STORAGE_POINTER()

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr

    dup1 __FUNC_SIG(balanceOf)
    eq balanceOf jumpi
    __FUNC_SIG(withdraw)
    eq withdraw jumpi

    0x00 callvalue gt receive jumpi

    stop

    balanceOf:
        [BALANCE]                     // slot0
        caller 0x00 mstore            // slot0 
        0x20 mstore                   // 
        0x40
        0x00
        sha3                          // slotM
        sload                         // data
        0x00 mstore
        0x20 0x00 return 

    withdraw:
        [BALANCE]                     // slot0
        caller 0x00 mstore            // slot0 
        0x20 mstore                   // 
        0x40
        0x00
        sha3                          // slotM
        dup1                          // slotM, slotM
        sload                         // value, slotM
        0x04 calldataload             // param, value, slotM
        dup1                          // param, param, value, slotM
        dup3                          // value, param, param, value, slotM
        lt revert_value jumpi         // param, value, slotM
        0x00                          // 0, param, value, slotM
        0x00                          // 0, 0, param, value, slotM
        0x00                          // 0, 0, 0, param, value, slotM
        0x00                          // 0, 0, 0, 0, param, value, slotM
        dup5                          // param, 0, 0, 0, 0, param, value, slotM
        caller                        // caller, param, 0, 0, 0, 0, param, value, slotM
        gas                           // gas, caller, param, 0, 0, 0, 0, param, value, slotM
        call update_balance jumpi     // success, param, value, slotM
        stop

    update_balance:
        swap1                         // value, param, slotM
        sub                           // newValue, slotM
        swap1                         // slotM, newValue
        sstore
        stop
        


    receive:
        [BALANCE]                     // slot0
        caller 0x00 mstore            // slot0
        0x20 mstore                   // 
        0x40
        0x00
        sha3                          // slotM
        dup1                          // slotM, slotM
        sload                         // oldValue, slotM
        callvalue                     // newValue, oldValue, slotM
        add                           // sum, slotM
        swap1                         // slotM, sum
        sstore                        //
        stop

    revert_value: 
        0x00 0x00 revert

}
